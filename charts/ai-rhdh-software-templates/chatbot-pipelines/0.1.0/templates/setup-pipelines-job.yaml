---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-configure-openshift-pipelines"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-configure-operators"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      containers:
        - name: configure-operators
          image: "registry.redhat.io/openshift4/ose-tools-rhel8:latest"
          workingDir: /tmp
          env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyToken }}
            - name: GITHUB_APP_APP_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyAppId }}
            - name: GITHUB_APP_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyWebhookURL }}
            - name: GITHUB_APP_WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyWebhookSecret }}
            - name: GITHUB_APP_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyPrivateKey }}
            - name: QUAY_DOCKERCONFIGJSON
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitops.gitSecretName }}
                  key: {{ .Values.gitops.gitSecretKeyQuayDockerConfigJSON }}
            - name: NAMESPACE
              value: {{ .Values.application.namespace }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Step 1: Configure Operators"
              set -o errexit
              set -o nounset
              set -o pipefail

              echo -n "* Fetching sigstore/cosign: "
              curl -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/bin/cosign && chmod +x /usr/bin/cosign
              echo "OK"

              PIPELINES_NAMESPACE="openshift-pipelines"

              echo -n "* Waiting for pipelines operator deployment: "
              until kubectl get namespace "$PIPELINES_NAMESPACE" >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              until kubectl get route -n "$PIPELINES_NAMESPACE" pipelines-as-code-controller >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              echo "OK"

              echo -n "* Configuring Chains secret: "
              SECRET="signing-secrets"
              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "$SECRET" -o jsonpath='{.data}' --ignore-not-found --allow-missing-template-keys)" == "" ]; then
                # Delete secret/signing-secrets if already exists since by default cosign creates immutable secrets
                echo -n "."
                kubectl delete secrets  -n "$PIPELINES_NAMESPACE" "$SECRET" --ignore-not-found=true

                # To make this run conveniently without user input let's create a random password
                echo -n "."
                RANDOM_PASS=$( openssl rand -base64 30 )

                # Generate the key pair secret directly in the cluster.
                # The secret should be created as immutable.
                echo -n "."
                env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair "k8s://$PIPELINES_NAMESPACE/$SECRET" >/dev/null
              fi
              # If the secret is not marked as immutable, make it so.
              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "$SECRET" -o jsonpath='{.immutable}')" != "true" ]; then
                echo -n "."
                kubectl patch secret -n "$PIPELINES_NAMESPACE" "$SECRET" --dry-run=client -o yaml \
                  --patch='{"immutable": true}' \
                | kubectl apply -f - >/dev/null
              fi
              echo "OK"

              echo
              echo "Configuration successful"
              echo "Step 1: Completed"

              ## Configure Pipelines
              echo "Step 2: Configure Pipelines"

              # Variables
              PIPELINES_NAMESPACE=${PIPELINES_NAMESPACE:-"openshift-pipelines"}
              PIPELINES_SECRET_NAME=${PIPELINES_SECRET_NAME:-'chatbot-pipelines-secret'}

              # Waiting for CRD
              # Waits for TektonConfig CRD to become avaiable when performing deployment of the pipelines
              # services.
              echo -n "* Waiting for 'tektonconfigs' CRD: "
              while [ $(kubectl api-resources | grep -c "^tektonconfigs ") = "0" ] ; do
                  echo -n "."
                  sleep 3
              done
              if [ $? -ne 0 ]; then
                  echo "FAIL"
                  exit 1
              fi
              echo "OK"

              # Waiting for pipelines operator deployment
              # Waits for the deployment of the pipelines services to finish before proceeding.
              echo -n "* Waiting for pipelines operator deployment: "
              until kubectl get namespace "$PIPELINES_NAMESPACE" >/dev/null 2>&1; do
                  echo -n "."
                  sleep 3
              done
              until kubectl get route -n "$PIPELINES_NAMESPACE" pipelines-as-code-controller >/dev/null 2>&1; do
                  echo -n "."
                  sleep 3
              done
              if [ $? -ne 0 ]; then
                  echo "FAIL"
                  exit 1
              fi
              echo "OK"

              # Update the TektonConfig resource
              # Updates Tekton config CR to have setup with target namespace and 
              # compatiablty with RHDH instances
              echo -n "* Update the TektonConfig resource: "
              until kubectl get tektonconfig config >/dev/null 2>&1; do
                  echo -n "_"
                  sleep 3
              done

              echo -n "* Update the TektonConfig resource: "
              until kubectl get tektonconfig config >/dev/null 2>&1; do
                  echo -n "_"
                  sleep 3
              done
              kubectl patch tektonconfig config --type 'merge' --patch "$( cat <<EOF
              spec:
                pipeline:
                  enable-bundles-resolver: true
                  enable-cluster-resolver: true
                  enable-custom-tasks: true
                  enable-git-resolver: true
                  enable-hub-resolver: true
                  enable-tekton-oci-bundles: true
                chain:
                  artifacts.oci.storage: oci
                  artifacts.pipelinerun.format: in-toto
                  artifacts.pipelinerun.storage: oci
                  artifacts.taskrun.format: in-toto
                  artifacts.taskrun.storage: oci
                  transparency.enabled: "true"
                  transparency.url: http://rekor-server.\$NAMESPACE.svc
              EOF
              )"
              if [ $? -ne 0 ]; then
                  echo "FAIL"kubectl patch tektonconfig config --type 'merge'
                  exit 1
              fi
              echo "OK"

              # Configuring Pipelines-as-Code
              # Configuring secrets tied to pipelines to interface with the target GitHub organization.
              echo -n "* Configuring Pipelines-as-Code: "
              if [ "$(kubectl -n "$NAMESPACE" get secret "$PIPELINES_SECRET_NAME" -o name --ignore-not-found | wc -l | tr -d '[:space:]')" = "0" ]; then
                  kubectl -n "$NAMESPACE" create secret generic "$PIPELINES_SECRET_NAME" \
                      --from-literal="webhook-github-secret=$GITHUB_APP_WEBHOOK_SECRET" \
                      --from-literal="webhook-url=$GITHUB_APP_WEBHOOK_URL" >/dev/null
              else
                  WEBHOOK_SECRET="$(kubectl -n "$NAMESPACE" get secret "$PIPELINES_SECRET_NAME" ) -o jsonpath="{.data.webhook-github-secret}" | base64 -d"
              fi
              if [ $? -ne 0 ]; then
                  echo "FAIL"
                  exit 1
              fi

              if [ "$(kubectl get secret -n "$PIPELINES_NAMESPACE" "pipelines-as-code-secret" -o name --ignore-not-found | wc -l | tr -d '[:space:]')" = "0" ]; then
                  kubectl -n "$PIPELINES_NAMESPACE" create secret generic pipelines-as-code-secret \
                      --from-literal github-application-id="$GITHUB_APP_APP_ID" \
                      --from-literal github-private-key="$GITHUB_APP_PRIVATE_KEY" \
                      --from-literal webhook.secret="$GITHUB_APP_WEBHOOK_SECRET" \
                      --dry-run=client -o yaml | kubectl apply -f - >/dev/null
                  
                  if [ $? -ne 0 ]; then
                      echo "FAIL"
                      exit 1
                  fi
              fi
              echo "OK"

              # Fetching cosign public key
              # Fetches cosign public key needed for namespace setup
              echo -n "* Fetching cosign public key: "
              while ! kubectl get secrets -n $PIPELINES_NAMESPACE signing-secrets >/dev/null 2>&1; do
                  echo -n "_"
                  sleep 2
              done
              echo -n "."
              COSIGN_SIGNING_PUBLIC_KEY=""
              while [ -z "${COSIGN_SIGNING_PUBLIC_KEY:-}" ]; do
                  echo -n "_"
                  sleep 2
                  COSIGN_SIGNING_PUBLIC_KEY=$(kubectl get secrets -n $PIPELINES_NAMESPACE signing-secrets -o jsonpath='{.data.cosign\.pub}' 2>/dev/null)
                  if [ $? -ne 0 ]; then
                      echo -n "FAIL"
                      exit 1
                  fi
              done
              echo "OK"

              # Configure Namespaces
              # Configuring namespaces with needed resources
              echo -n "* Configuring Namespaces: "

              SECRET_NAME="cosign-pub"
              if [ -n "$COSIGN_SIGNING_PUBLIC_KEY" ]; then
                cat <<EOF | kubectl apply -f - >/dev/null
              apiVersion: v1
              data:
                  cosign.pub: $COSIGN_SIGNING_PUBLIC_KEY
              kind: Secret
              metadata:
                  labels:
                      app.kubernetes.io/instance: default
                      app.kubernetes.io/part-of: tekton-chains
                      operator.tekton.dev/operand-name: tektoncd-chains
                  name: $SECRET_NAME
                  namespace: $NAMESPACE
              type: Opaque
              EOF
              if [ $? -ne 0 ]; then
                echo -n "FAIL"
                exit 1
              fi
                echo -n "."
              fi

              SECRET_NAME="gitops-auth-secret"
              if [ -n "$GITHUB_TOKEN" ]; then
                  kubectl -n $NAMESPACE create secret generic "$SECRET_NAME" \
                      --from-literal=password=$GITHUB_TOKEN \
                      --type=kubernetes.io/basic-auth \
                      --dry-run=client -o yaml | kubectl -n $NAMESPACE apply --filename - --overwrite=true >/dev/null
                  if [ $? -ne 0 ]; then
                      echo -n "FAIL"
                      exit 1
                  fi
                  echo -n "."
              fi

              SECRET_NAME="pipelines-secret"
              if [ -n "$GITHUB_APP_WEBHOOK_SECRET" ]; then
                  kubectl -n $NAMESPACE create secret generic "$SECRET_NAME" \
                      --from-literal=webhook.secret=$GITHUB_APP_WEBHOOK_SECRET \
                      --dry-run=client -o yaml | kubectl -n $NAMESPACE apply --filename - --overwrite=true >/dev/null
                  if [ $? -ne 0 ]; then
                      echo -n "FAIL"
                      exit 1
                  fi
                  echo -n "."
              fi

              SECRET_NAME="helm-chart-image-registry-token"
              if [ -n "$QUAY_DOCKERCONFIGJSON" ]; then
                DATA=$(mktemp)
                echo -n "$QUAY_DOCKERCONFIGJSON" >"$DATA"
                kubectl -n $NAMESPACE create secret docker-registry "$SECRET_NAME" \
                    --from-file=.dockerconfigjson="$DATA" --dry-run=client -o yaml | \
                    kubectl -n $NAMESPACE apply --filename - --overwrite=true >/dev/null
                if [ $? -ne 0 ]; then
                    echo -n "FAIL"
                    exit 1
                fi
                rm "$DATA"
                echo -n "."
                while ! kubectl -n $NAMESPACE get serviceaccount pipeline >/dev/null; do
                    sleep 2
                    echo -n "_"
                done
                for SA in default pipeline; do
                    kubectl -n $NAMESPACE patch serviceaccounts "$SA" --patch "
                secrets:
                - name: $SECRET_NAME
                imagePullSecrets:
                - name: $SECRET_NAME
                " >/dev/null
                    if [ $? -ne 0 ]; then
                        echo -n "FAIL"
                        exit 1
                    fi
                    echo -n "."
                done
                echo -n "."
              fi
              echo "OK"
      restartPolicy: "Never"
      serviceAccountName: helm-manager
